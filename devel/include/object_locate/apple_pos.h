// Generated by gencpp from file object_locate/apple_pos.msg
// DO NOT EDIT!


#ifndef OBJECT_LOCATE_MESSAGE_APPLE_POS_H
#define OBJECT_LOCATE_MESSAGE_APPLE_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Char.h>
#include <geometry_msgs/Pose.h>

namespace object_locate
{
template <class ContainerAllocator>
struct apple_pos_
{
  typedef apple_pos_<ContainerAllocator> Type;

  apple_pos_()
    : data()
    , pose()  {
    }
  apple_pos_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::Char_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Char_<ContainerAllocator> >::other >  _data_type;
  _data_type data;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;




  typedef boost::shared_ptr< ::object_locate::apple_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_locate::apple_pos_<ContainerAllocator> const> ConstPtr;

}; // struct apple_pos_

typedef ::object_locate::apple_pos_<std::allocator<void> > apple_pos;

typedef boost::shared_ptr< ::object_locate::apple_pos > apple_posPtr;
typedef boost::shared_ptr< ::object_locate::apple_pos const> apple_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_locate::apple_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_locate::apple_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_locate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_locate': ['/home/catkin_ws/src/object_locate/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_locate::apple_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_locate::apple_pos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_locate::apple_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_locate::apple_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_locate::apple_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_locate::apple_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_locate::apple_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb605b25d565ff4ea61c702d2fc0b3a2";
  }

  static const char* value(const ::object_locate::apple_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb605b25d565ff4eULL;
  static const uint64_t static_value2 = 0xa61c702d2fc0b3a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_locate::apple_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_locate/apple_pos";
  }

  static const char* value(const ::object_locate::apple_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_locate::apple_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Char[] data\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Char\n\
char data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::object_locate::apple_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_locate::apple_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct apple_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_locate::apple_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_locate::apple_pos_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Char_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_LOCATE_MESSAGE_APPLE_POS_H
